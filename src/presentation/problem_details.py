"""RFC 7807 Problem Details implementation for consistent API error responses."""

from pydantic import BaseModel, Field


class ProblemDetail(BaseModel):
    """RFC 7807 Problem Details model for structured error responses.

    Provides a standardized way to carry machine-readable details of errors
    in HTTP response bodies to avoid the need to define new error response
    formats for HTTP APIs.
    """

    type: str = Field(
        default="about:blank",
        description="A URI reference that identifies the problem type",
        examples=["https://api.savt.com/errors/validation-failed"],
    )
    title: str = Field(
        description="A short, human-readable summary of the problem type",
        examples=["Validation Failed"],
    )
    status: int = Field(
        description="The HTTP status code generated by the origin server",
        examples=[400, 404, 409, 422, 500],
    )
    detail: str | None = Field(
        default=None,
        description="A human-readable explanation specific to this occurrence",
        examples=["Item name cannot be empty"],
    )
    instance: str | None = Field(
        default=None,
        description="A URI reference that identifies the specific occurrence",
        examples=["/api/v1/items"],
    )


class ValidationProblemDetail(ProblemDetail):
    """Extended Problem Details for validation errors with field-specific info."""

    errors: list[dict[str, str]] | None = Field(
        default=None,
        description="List of specific field validation errors",
        examples=[
            [{"field": "name", "code": "required", "message": "Field is required"}]
        ],
    )


class ConflictProblemDetail(ProblemDetail):
    """Extended Problem Details for conflict errors with resource information."""

    resource_type: str | None = Field(
        default=None,
        description="Type of resource that conflicts",
        examples=["item", "feature"],
    )
    conflicting_field: str | None = Field(
        default=None,
        description="Field that caused the conflict",
        examples=["name"],
    )


class ErrorCodes:
    """Structured error codes for programmatic handling."""

    # Validation errors
    VALIDATION_FAILED = "validation_failed"
    FIELD_REQUIRED = "field_required"
    FIELD_TOO_LONG = "field_too_long"
    FIELD_TOO_SHORT = "field_too_short"
    FIELD_INVALID_FORMAT = "field_invalid_format"
    FIELD_INVALID_VALUE = "field_invalid_value"

    # Conflict errors
    RESOURCE_ALREADY_EXISTS = "resource_already_exists"
    ITEM_ALREADY_EXISTS = "item_already_exists"
    FEATURE_ALREADY_EXISTS = "feature_already_exists"

    # Not found errors
    RESOURCE_NOT_FOUND = "resource_not_found"
    ITEM_NOT_FOUND = "item_not_found"
    FEATURE_NOT_FOUND = "feature_not_found"

    # Business logic errors
    OPERATION_NOT_ALLOWED = "operation_not_allowed"
    INSUFFICIENT_PERMISSIONS = "insufficient_permissions"

    # System errors
    INTERNAL_SERVER_ERROR = "internal_server_error"
    DATABASE_ERROR = "database_error"
    RATE_LIMIT_EXCEEDED = "rate_limit_exceeded"


class ProblemDetailFactory:
    """Factory for creating standardized Problem Detail responses."""

    BASE_URL = "https://api.savt.com/errors"

    @classmethod
    def validation_failed(
        cls,
        detail: str,
        instance: str | None = None,
        field_errors: list[dict[str, str]] | None = None,
    ) -> ValidationProblemDetail:
        """Create a validation failed problem detail."""
        return ValidationProblemDetail(
            type=f"{cls.BASE_URL}/validation-failed",
            title="Validation Failed",
            status=400,
            detail=detail,
            instance=instance,
            errors=field_errors or [],
        )

    @classmethod
    def resource_already_exists(
        cls,
        resource_type: str,
        detail: str,
        instance: str | None = None,
        conflicting_field: str | None = None,
    ) -> ConflictProblemDetail:
        """Create a resource already exists problem detail."""
        return ConflictProblemDetail(
            type=f"{cls.BASE_URL}/resource-already-exists",
            title="Resource Already Exists",
            status=409,
            detail=detail,
            instance=instance,
            resource_type=resource_type,
            conflicting_field=conflicting_field,
        )

    @classmethod
    def resource_not_found(
        cls,
        resource_type: str,
        detail: str,
        instance: str | None = None,
    ) -> ProblemDetail:
        """Create a resource not found problem detail."""
        return ProblemDetail(
            type=f"{cls.BASE_URL}/resource-not-found",
            title="Resource Not Found",
            status=404,
            detail=detail,
            instance=instance,
        )

    @classmethod
    def internal_server_error(
        cls,
        detail: str = "An unexpected error occurred",
        instance: str | None = None,
    ) -> ProblemDetail:
        """Create an internal server error problem detail."""
        return ProblemDetail(
            type=f"{cls.BASE_URL}/internal-server-error",
            title="Internal Server Error",
            status=500,
            detail=detail,
            instance=instance,
        )

    @classmethod
    def rate_limit_exceeded(
        cls,
        detail: str,
        instance: str | None = None,
    ) -> ProblemDetail:
        """Create a rate limit exceeded problem detail."""
        return ProblemDetail(
            type=f"{cls.BASE_URL}/rate-limit-exceeded",
            title="Rate Limit Exceeded",
            status=429,
            detail=detail,
            instance=instance,
        )
